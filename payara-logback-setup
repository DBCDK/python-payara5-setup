#!/usr/bin/env python3

import os
from io import BytesIO
from operator import le
from xml.etree import ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment
import sys


class Levels(object):

    _LEVEL_MAP = {
        'E': 'ERROR',
        'W': 'WARNING',
        'I': 'INFO',
        'D': 'DEBUG',
        'T': 'TRACE'
    }

    def __init__(self):
        self._levels = dict()
        for env in os.environ.keys():
            if not env.startswith("LOG__"):
                continue
            key = env[5:].replace('_', '.')
            value = os.environ[env].upper()
            if value[0] in self._LEVEL_MAP:
                value = self._LEVEL_MAP[value[0]]
            self._levels[key] = value

    def add_to_xml(self, xml):
        log = os.environ.get("LOG")
        if log is not None:
            self._ensure_node(xml, 'root').set("level", log)
        for key, value in sorted(self._levels.items(), reverse=True):
            self._ensure_node(xml, 'logger', {'name': key}).set("level", value)

    def _ensure_node(self, xml, tag, attrs = dict()):
        for node in xml:
            if node.tag == tag:
                for k,v in attrs.items():
                    if node.attrib.get(k) is not v:
                        node = None
                        break
                if node is not None:
                    return node
        return SubElement(xml, tag, attrs)


if __name__ == '__main__':
    levels = Levels()
    filename = "logback.xml"
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    lines = []
    with open(filename, 'r') as io:
        content = io.read()
        xml = ET.fromstring(content)
    levels.add_to_xml(xml)
    if len(sys.argv) > 2:
        filename = sys.argv[2]
    with open(filename, 'w') as io:
        out = BytesIO()
        ET.ElementTree(xml).write(out, encoding="UTF-8", xml_declaration=True)
        content = out.getvalue().decode("UTF-8")
        io.write(content)
